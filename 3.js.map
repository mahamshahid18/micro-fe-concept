{"version":3,"sources":["webpack:///./src/react/tasks.component.js","webpack:///./src/react/root.component.js","webpack:///./src/react/event-handler.js","webpack:///./src/react/main.app.js","webpack:///./src/react/state.js"],"names":["_Tasks","props","this","tasks","addTask","Fragment","className","map","task","key","id","text","onClick","React","Component","Tasks","connect","state","dispatch","todoText","type","ReactAppActionTypes","AddTask","payload","App","store","messageHandler","message","messageData","data","dispatchedFor","messageType","processMessage","bootstrap","window","addEventListener","Promise","resolve","unmount","removeEventListener","mount","singleSpaReact","ReactDOM","rootComponent","domElementGetter","document","getElementById","initialState","createStore","action","length"],"mappings":"88BAKMA,E,YACF,WAAYC,GAAO,O,4FAAA,+BACTA,I,gSAGD,MACsBC,KAAKD,MAAxBE,EADH,EACGA,MAAOC,EADV,EACUA,QAEf,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,kBACX,4BAEQH,EAAMI,KAAI,SAACC,GAAD,OACN,wBAAIC,IAAKD,EAAKE,GAAIJ,UAAU,QACxB,0BAAMA,UAAU,QACVE,EAAKE,IAEX,8BACMF,EAAKG,YAO/B,yBAAKL,UAAU,aACX,4BAAQA,UAAU,oBAAoBM,QAAS,kBAAMR,EAAQ,sBAA7D,oBAIJ,4iB,8BA/BKS,IAAMC,WAwEpB,IAAMC,EAAQC,aAnBrB,SAAyBC,GACrB,MAAO,CACHd,MAAOc,EAAMd,UAIrB,SAA4Be,GACxB,MAAO,CACHd,QAAS,SAACe,GAAD,OAAcD,EACnB,CACIE,KAAMC,IAAoBC,QAC1BC,QAAS,CACLZ,KAAMQ,SAOLH,CAGnBhB,G,uyBC1EK,IAAMwB,EAAb,YACI,WAAYvB,GAAO,O,4FAAA,+BACTA,I,UAFd,O,kOAAA,M,EAAA,G,EAAA,6EAQQ,OACI,kBAAC,IAAMI,SAAP,KACI,kBAAC,IAAD,CAAUoB,MAAOA,KACb,yBAAKnB,UAAU,qCACX,wBAAIA,UAAU,aAAd,mBAGA,kBAACS,EAAD,QAGR,0M,2BAlBhB,GAAyBF,IAAMC,WCJxB,SAASY,EAAeC,GAC3B,IAAMC,EAAcD,EAAQE,KAEvBD,GAC6B,kBAA9BA,EAAYE,eAKpB,SAAwBH,GACpB,OAAOA,EAAQI,aACX,KAAKV,IAAoBC,QACdG,IAAMP,SACT,CACIE,KAAMC,IAAoBC,QAC1BC,QAASI,EAAQJ,WATjCS,CAAeJ,GCUZ,SAASK,IAEd,OADAC,OAAOC,iBAAiB,UAAWT,GAC5BU,QAAQC,UAGV,SAASC,IAEd,OADAJ,OAAOK,oBAAoB,WACpBH,QAAQC,UAzBjB,wHA4BO,IAAMG,EAAQ,CAjBGC,IAAe,CACrC5B,UACA6B,aACAC,cAAenB,EACfoB,iBARF,WACE,OAAOC,SAASC,eAAe,iBAqBfN,Q,0xBC3BX,IAAMO,EAAe,CACxB5C,MAAO,CACH,CACIO,GAAI,EACJC,KAAM,gBAEV,CACID,GAAI,EACJC,KAAM,0BAKLU,EAAsB,CAC/BC,QAAS,YAqBN,IAAMG,EAAQuB,aAlBrB,WAA+C,IAA9B/B,EAA8B,uDAAtB8B,EAAcE,EAAQ,uCAC3C,OAAOA,EAAO7B,MACV,KAAKC,EAAoBC,QACrB,O,+UAAA,IACOL,EADP,CAEId,MAAO,GAAF,SACEc,EAAMd,OADR,CAED,CACIO,GAAIO,EAAMd,MAAM+C,OAChBvC,KAAMsC,EAAO1B,QAAQZ,UAIrC,QACI,OAAOM","file":"3.js","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux';\n\nimport { ReactAppActionTypes } from './state';\n\nclass _Tasks extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { tasks, addTask } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className='task-container'>\n                    <ul>\n                        {\n                            tasks.map((task) => (\n                                <li key={task.id} className=\"py-1\">\n                                    <span className=\"px-2\">\n                                        { task.id }\n                                    </span>\n                                    <span>\n                                        { task.text }\n                                    </span>\n                                </li>\n                            ))\n                        }\n                    </ul>\n                </div>\n                <div className=\"mx-3 my-2\">\n                    <button className=\"add-task-btn py-1\" onClick={() => addTask('Some random text')}>\n                        Add random task\n                    </button>\n                </div>\n                <style>\n                    {\n                        `\n                            .task-container {\n                                padding-left: 0.5rem;\n                                padding-right: 0.5rem;\n                            }\n\n                            .add-task-btn {\n                                color: #fff6e6;\n                                background-color: #ff8f00;\n                                border-radius: 4px;\n                                border: 1px solid #ff8f00;\n                            }\n                        `\n                    }\n                </style>\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        tasks: state.tasks\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addTask: (todoText) => dispatch(\n            {\n                type: ReactAppActionTypes.AddTask,\n                payload: {\n                    text: todoText\n                }\n            }\n        )\n    }\n}\n\nexport const Tasks = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(_Tasks);","import React from \"react\"\nimport { Provider } from 'react-redux';\n\nimport { Tasks } from './tasks.component';\nimport { store } from './state';\n\nexport class App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidCatch() {}\n\n    render() {\n        return (\n            <React.Fragment>\n                <Provider store={store}>\n                    <div className=\"h-100 w-100 py-1 mx-3 react-tasks\">\n                        <h1 className=\"mx-3 my-3\">\n                            React Tasks App\n                        </h1>\n                        <Tasks />\n                    </div>\n                </Provider>\n                <style>\n                    {\n                        `\n                            .react-tasks {\n                                background-color: #ffefcf;\n                            }\n                        `\n                    }\n                </style>\n            </React.Fragment>\n        );\n    }\n}\n","import { ReactAppActionTypes, store } from './state';\n\nexport function messageHandler(message) {\n    const messageData = message.data;\n\n    if (!messageData) return;\n    if (messageData.dispatchedFor !== 'ReactAppTasks') return;\n\n    processMessage(messageData);\n}\n\nfunction processMessage(message) {\n    switch(message.messageType) {\n        case ReactAppActionTypes.AddTask: {\n            return store.dispatch(\n                {\n                    type: ReactAppActionTypes.AddTask,\n                    payload: message.payload\n                }\n            )\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport singleSpaReact from 'single-spa-react';\n\nimport { App } from './root.component.js';\nimport { messageHandler } from './event-handler';\n\nfunction domElementGetter() {\n  return document.getElementById('reacttasks')\n}\n\nconst reactLifecycles = singleSpaReact({\n  React,\n  ReactDOM,\n  rootComponent: App,\n  domElementGetter,\n})\n\nexport function bootstrap() {\n  window.addEventListener('message', messageHandler);\n  return Promise.resolve();\n}\n\nexport function unmount() {\n  window.removeEventListener('message');\n  return Promise.resolve();\n}\n\nexport const mount = [\n  reactLifecycles.mount,\n];\n","import { createStore } from 'redux';\n\nexport const initialState = {\n    tasks: [\n        {\n            id: 0,\n            text: 'Do something'\n        },\n        {\n            id: 1,\n            text: 'Do another something'\n        }\n    ]\n};\n\nexport const ReactAppActionTypes = {\n    AddTask: 'ADD_TASK'\n};\n\nfunction reducer(state = initialState, action) {\n    switch(action.type) {\n        case ReactAppActionTypes.AddTask:\n            return {\n                ...state,\n                tasks: [\n                    ...state.tasks,\n                    {\n                        id: state.tasks.length,\n                        text: action.payload.text\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n}\n\nexport const store = createStore(reducer);"],"sourceRoot":""}